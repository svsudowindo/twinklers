{"version":3,"sources":["./src/app/shared/constants/app-properties.ts","./src/app/shared/constants/errors.ts","./src/app/shared/constants/gloabal-variable-enums.ts","./src/app/shared/constants/request-enums.ts","./src/app/shared/constants/validation-patterns.ts","./src/app/shared/services/common/baseClass.ts","./src/app/shared/services/common/globalVariables.ts","./src/app/shared/services/http/common-http.service.ts","./src/app/shared/services/http/common-request.service.ts","./src/app/shared/services/http/frame-url.service.ts"],"names":[],"mappings":"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","file":"default~profile-profile-module~views-auth-views-login-login-module~views-auth-views-registration-reg~fbe267c6-es2015.js","sourcesContent":["export const PROPERTIES = {\r\n    // Counts to retry the remote service if fails\r\n    RETRY_SERVICE_COUNT: 0\r\n};\r\n\r\n","export const errors = {\r\n    404: {\r\n        message: 'Not Found'\r\n    },\r\n    0: {\r\n        message: 'Unknown Error'\r\n    },\r\n    'default': {\r\n        message: 'Something went wrong. Unable to find the issue'\r\n    }\r\n};\r\n","export enum GlobalVariableEnums {\r\n    TOKEN = 'token'\r\n}\r\n\r\nexport const STATUS = [\r\n    {\r\n        id: 'ACTIVE',\r\n        value: true,\r\n        label: 'ACTIVE'\r\n    },\r\n    {\r\n        id: 'INACTIVE',\r\n        value: false,\r\n        label: 'INACTIVE'\r\n    }\r\n];\r\n\r\nexport const POPUP_RESPONSE = {\r\n    SUCCESS: 'success',\r\n    CANCEL: 'cancel'\r\n}","export const RequestEnums = {\r\n    REGISTER: {\r\n        type: 'POST',\r\n        path: '/auth/register',\r\n        keys: [],\r\n        values: []\r\n    },\r\n    GET_GENDER_LIST: {\r\n        type: 'GET',\r\n        path: '/auth/genders-list',\r\n        keys: [],\r\n        values: []\r\n    },\r\n    LOGIN: {\r\n        type: 'POST',\r\n        path: '/auth/login',\r\n        keys: [],\r\n        values: []\r\n    },\r\n    UPDATE_USER_PROFILE: {\r\n        type: 'POST',\r\n        path: '/common/update-profile',\r\n        keys: [],\r\n        values: []\r\n    },\r\n    UPLOAD_IMAGE_GET_URL: {\r\n        type: 'POST',\r\n        path: '/common/image-uploader',\r\n        keys: [],\r\n        values: []\r\n    },\r\n    CREATE_CATEGORY: {\r\n        type: 'POST',\r\n        path: '/admin/modify-category',\r\n        keys: [],\r\n        values: []\r\n    },\r\n    GET_CATEGORY_LIST: {\r\n        type: 'GET',\r\n        path: '/common/get-categories',\r\n        keys: [],\r\n        values: []\r\n    },\r\n    GET_DASHBOARD_DATA: {\r\n        type: 'GET',\r\n        path: '/admin/get-admin-dashboard',\r\n        keys: [],\r\n        values: []\r\n    }\r\n};\r\n\r\n","\r\nexport const VALIDATION_PATTERNS = {\r\n  EMAIL: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n  NAME: /^[a-zA-Z0-9!@#$%^&*'?><(){}:;.,_+=/\\~` -]+$/i,\r\n  PASSWORD: /^[a-zA-Z0-9!@#$%^&*]+$/i,\r\n  PHONE: /\\d{10}/,\r\n  USERNAME: /^[a-z0-9A-Z]+$/i,\r\n  POSITIVE_INTEGER: /^[0-9,\" \"]+$/i\r\n};\r\n","import { Injectable, Injector, OnInit } from '@angular/core';\r\nimport Utils from './utils';\r\nimport { GlobalVariables } from './globalVariables';\r\nimport { Router } from '@angular/router';\r\nimport { FormGroup, FormArray, FormControl } from '@angular/forms';\r\n\r\n@Injectable()\r\nexport class BaseClass implements OnInit {\r\n\r\n\r\n  constructor() {\r\n  }\r\n\r\n  // tslint:disable-next-line:contextual-lifecycle\r\n  ngOnInit() {\r\n    window.scrollTo(0, 0);\r\n  }\r\n\r\n  isValidInput(input) {\r\n    return Utils.isValidInput(input);\r\n  }\r\n\r\n  /**\r\n   * Validates any form fields present Group form\r\n   * @param groupName Group name should be a Group name passed from UI\r\n   * @param fieldName field name should be a form control name passed from UI\r\n   */\r\n  isValidField(groupName, fieldName) {\r\n    if (groupName.get(fieldName).invalid && (groupName.get(fieldName).touched || groupName.get(fieldName).dirty)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // to validate either formArray, formControl, FormGroup.\r\n  // tslint:disable-next-line:variable-name\r\n  getErrorMessage(formGroup, validation_messages, validation_item): string {\r\n    let message = '';\r\n    const keys = Object.keys(formGroup.controls);\r\n    const index = keys.indexOf(validation_item);\r\n    if (index !== -1) {\r\n      const control = formGroup.get(keys[index]);\r\n      if (control instanceof FormControl) {\r\n        message = this.getControlErrorMessage(control, validation_messages, validation_item);\r\n      }\r\n    } else {\r\n      // tslint:disable-next-line:prefer-for-of\r\n      for (let i = 0; i < keys.length; i++) {\r\n        const control = formGroup.get(keys[i]);\r\n        if (control instanceof FormGroup) {\r\n          this.getErrorMessage(control, validation_messages, validation_item);\r\n        } else if (control instanceof FormArray) {\r\n          message = this.validateFormArray(control, validation_messages, validation_item);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return message;\r\n  }\r\n  // to validate form array\r\n  // tslint:disable-next-line:variable-name\r\n  private validateFormArray(formControl: FormArray, validation_messages, validation_item) {\r\n    let message = '';\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < formControl.controls.length; i++) {\r\n      message = this.getErrorMessage(formControl.controls[i], validation_messages, validation_item);\r\n      if (message !== '') {\r\n        break;\r\n      }\r\n    }\r\n    return message;\r\n  }\r\n\r\n  // returns the error particular message configured in form.\r\n  // tslint:disable-next-line:variable-name\r\n  private getControlErrorMessage(control, validation_messages?: any, validation_item?: any) {\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < validation_messages[validation_item].length; i++) {\r\n      if (control.hasError(validation_messages[validation_item][i].type)) {\r\n        return validation_messages[validation_item][i].message;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  findInvalidControls(formObject) {\r\n    const invalid = [];\r\n    const controls = formObject.controls;\r\n    for (const name in controls) {\r\n      if (controls[name].invalid || controls[name].hasError('notValid')) {\r\n        invalid.push(name);\r\n      }\r\n    }\r\n    Utils.log('Invalid Controls: ' + Utils.stringify(invalid));\r\n  }\r\n\r\n  /**\r\n   * Allow only number event\r\n   * @param event Keyboard event\r\n   */\r\n  onlyNumber(event) {\r\n    return event.keyCode >= 48 && event.keyCode <= 57;\r\n  }\r\n\r\n  /**\r\n   * Allow with decimals\r\n   * @param event Keyboard event\r\n   */\r\n  allowNumberAndDot(event) {\r\n    return (event.keyCode >= 48 && event.keyCode <= 57) || event.keyCode === 46;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport Utils from './utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GlobalVariables {\r\n\r\n  private paramsData: any = {};\r\n  private retainParamValue = false;\r\n\r\n  constructor() { }\r\n\r\n  // returns the data based on the key passed\r\n  // @key => object key from global variable enums\r\n  public getParameterData(key) {\r\n    if (!Utils.isUndefined(this.paramsData) && !Utils.isNull(this.paramsData)) {\r\n      if (this.paramsData.hasOwnProperty(key)) {\r\n        const output = this.paramsData[key];\r\n        if (this.retainParamValue === false) {\r\n          this.setParameterData(key, null);\r\n        }\r\n        return output;\r\n      } else {\r\n        return null;\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // single time set method\r\n  // @key => object key from global variable enums\r\n  // @input => any data value either an object or a value\r\n  // @retainvalue => weather the data should present or not\r\n  public setParameterData(key, input, retainValue = true) {\r\n    this.paramsData[key] = input;\r\n    this.retainParamValue = retainValue;\r\n    console.log(this.paramsData);\r\n  }\r\n}\r\n","// Angular Modules\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { map, catchError, retry } from 'rxjs/operators';\r\nimport { throwError } from 'rxjs';\r\nimport { PROPERTIES } from '../../constants/app-properties';\r\nimport { errors } from '../../constants/errors';\r\nimport { Observable } from 'rxjs';\r\n\r\n// Custom Enums\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CommonHttpService {\r\n\r\n    constructor(private _http: HttpClient) { }\r\n\r\n    // @method get\r\n    // @params HttpParams if needed\r\n    // @path Request URL\r\n    private get(path, requestOptions): Observable<any> {\r\n        return this._http.get(path, requestOptions).pipe(\r\n            map(res => {\r\n                return res;\r\n            }),\r\n            catchError(this.errorHandler), // Catch Errors if service fails\r\n            retry(PROPERTIES.RETRY_SERVICE_COUNT) // if you want to retry the request. Please mention the retry count value\r\n        );\r\n    }\r\n    // Utility method for Create.\r\n    // @method post\r\n    // @param path\r\n    // @param body\r\n    private put(path: string, body: Object = {}, requestOptions): Observable<any> {\r\n        return this._http.put(\r\n            path, body, requestOptions).pipe(\r\n                map(res => {\r\n                    return res;\r\n                }),\r\n                catchError(this.errorHandler)\r\n            );\r\n    }\r\n    // Utility method for Create.\r\n    // @method post\r\n    // @param path\r\n    // @param body\r\n    private post(path: string, body: Object = {}, requestOptions): Observable<any> {\r\n        return this._http.post(\r\n            path, body, requestOptions).pipe(\r\n                map(res => {\r\n                    return res;\r\n                }),\r\n                catchError(this.errorHandler)\r\n            );\r\n    }\r\n\r\n\r\n    // Utility method for Create.\r\n    // @method patch\r\n    // @param path\r\n    // @param body\r\n    // @param customHeaders\r\n    private patch(path: string, body: Object = {}, requestOptions): Observable<any> {\r\n        return this._http.patch(\r\n            path, body, requestOptions).pipe(\r\n                map(res => {\r\n                    return res;\r\n                }),\r\n                catchError(this.errorHandler)\r\n            );\r\n    }\r\n\r\n    // Utility method for Create.\r\n    // @method delete\r\n    // @param path\r\n    // @param customHeaders\r\n    private delete(path: string, requestOptions): Observable<any> {\r\n        return this._http.delete(\r\n            path, requestOptions).pipe(\r\n                map(res => {\r\n                    return res;\r\n                }),\r\n                catchError(this.errorHandler)\r\n            );\r\n    }\r\n\r\n    // Please add errors and error codes in errors.json.ts file\r\n    private errorHandler(error: HttpErrorResponse) {\r\n        // To know weather the error is from Client or server error\r\n        if (error.error instanceof ErrorEvent) {\r\n            console.log('Client side error. Please check the request and body');\r\n        } else {\r\n            console.log('Server Error. Please check the error from server side');\r\n        }\r\n        // get's error message from errors.json.ts\r\n        let errorMessage = errors['default'].message;\r\n        if (errors.hasOwnProperty(error.status)) {\r\n            errorMessage = errors[error.status].message;\r\n        }\r\n        return throwError(errorMessage);\r\n    }\r\n\r\n    // To execute any Http service request\r\n    public sendReciveService(\r\n        requestObj: any,\r\n        body = {},\r\n        params: HttpParams = new HttpParams(),\r\n        customHeaders?: HttpHeaders): Observable<any> {\r\n        const requestOptions = {};\r\n        requestOptions['headers'] = customHeaders ? customHeaders : {};\r\n        requestOptions['params'] = params;\r\n        switch (requestObj.type) {\r\n            case 'GET': {\r\n                return this.get(requestObj.path, requestOptions);\r\n            }\r\n            case 'POST': {\r\n                return this.post(requestObj.path, body, requestOptions);\r\n            }\r\n            case 'PUT': {\r\n                return this.put(requestObj.path, body, requestOptions);\r\n            }\r\n            case 'PATCH': {\r\n                return this.patch(requestObj.path, body, requestOptions);\r\n            }\r\n            case 'DELETE': {\r\n                return this.delete(requestObj.path, requestOptions);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CommonHttpService } from './common-http.service';\r\nimport { FrameURLService } from './frame-url.service';\r\nimport { Observable } from 'rxjs';\r\nimport Utils from '../common/utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CommonRequestService {\r\n\r\n  constructor(\r\n    private frameUrlService: FrameURLService,\r\n    private commonHttpService: CommonHttpService\r\n    ) { }\r\n\r\n  request(requestObject, postBody = null, httpParams = null, customHeaders = null): Observable<any> {\r\n    return this.mainRequest(Utils.avoidShallowClone(requestObject), postBody, httpParams, customHeaders);\r\n  }\r\n  private mainRequest(requestObject, postBody = null, httpParams = null, customHeaders = null): Observable<any> {\r\n    requestObject.path = this.frameUrlService.getHttpFramedURL(requestObject);\r\n    return this.commonHttpService.sendReciveService(requestObject, postBody, httpParams, customHeaders);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GlobalVariables } from '../common/globalVariables';\r\nimport { GlobalVariableEnums } from '../../constants/gloabal-variable-enums';\r\nimport { environment } from '../../../../environments/environment';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FrameURLService {\r\n    constructor(private _globalVariables: GlobalVariables) { }\r\n\r\n    // Return the Exact path to be sent\r\n    public getHttpFramedURL(requestObj: any) {\r\n        const URL = environment.BASE_URL + requestObj.path;\r\n        let path = URL.replace('token', this._globalVariables.getParameterData(GlobalVariableEnums.TOKEN));\r\n        if (requestObj.keys.length > 0 && requestObj.values.length > 0) {\r\n            for (let i = 0; i < requestObj.keys.length; i++) {\r\n                // Replaces the word which starts with colon only. which indicates run time value\r\n                path = path.replace(':' + requestObj.keys[i], requestObj.values[i]);\r\n            }\r\n        }\r\n        return path;\r\n    }\r\n}\r\n"],"sourceRoot":"webpack:///"}