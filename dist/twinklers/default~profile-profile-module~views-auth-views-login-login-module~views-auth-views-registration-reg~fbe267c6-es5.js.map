{"version":3,"sources":["src/app/shared/constants/app-properties.ts","src/app/shared/constants/errors.ts","src/app/shared/constants/gloabal-variable-enums.ts","src/app/shared/constants/request-enums.ts","src/app/shared/constants/validation-patterns.ts","src/app/shared/services/common/baseClass.ts","src/app/shared/services/common/globalVariables.ts","src/app/shared/services/http/common-http.service.ts","src/app/shared/services/http/common-request.service.ts","src/app/shared/services/http/frame-url.service.ts"],"names":[],"mappings":"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","sourcesContent":["export const PROPERTIES = {\r\n    // Counts to retry the remote service if fails\r\n    RETRY_SERVICE_COUNT: 0\r\n};\r\n\r\n","export const errors = {\r\n    404: {\r\n        message: 'Not Found'\r\n    },\r\n    0: {\r\n        message: 'Unknown Error'\r\n    },\r\n    'default': {\r\n        message: 'Something went wrong. Unable to find the issue'\r\n    }\r\n};\r\n","export enum GlobalVariableEnums {\r\n    TOKEN = 'token'\r\n}\r\n\r\nexport const STATUS = [\r\n    {\r\n        id: 'ACTIVE',\r\n        value: true,\r\n        label: 'ACTIVE'\r\n    },\r\n    {\r\n        id: 'INACTIVE',\r\n        value: false,\r\n        label: 'INACTIVE'\r\n    }\r\n];\r\n\r\nexport const POPUP_RESPONSE = {\r\n    SUCCESS: 'success',\r\n    CANCEL: 'cancel'\r\n}","export const RequestEnums = {\r\n    REGISTER: {\r\n        type: 'POST',\r\n        path: '/auth/register',\r\n        keys: [],\r\n        values: []\r\n    },\r\n    GET_GENDER_LIST: {\r\n        type: 'GET',\r\n        path: '/auth/genders-list',\r\n        keys: [],\r\n        values: []\r\n    },\r\n    LOGIN: {\r\n        type: 'POST',\r\n        path: '/auth/login',\r\n        keys: [],\r\n        values: []\r\n    },\r\n    UPDATE_USER_PROFILE: {\r\n        type: 'POST',\r\n        path: '/common/update-profile',\r\n        keys: [],\r\n        values: []\r\n    },\r\n    UPLOAD_IMAGE_GET_URL: {\r\n        type: 'POST',\r\n        path: '/common/image-uploader',\r\n        keys: [],\r\n        values: []\r\n    },\r\n    CREATE_CATEGORY: {\r\n        type: 'POST',\r\n        path: '/admin/modify-category',\r\n        keys: [],\r\n        values: []\r\n    },\r\n    GET_CATEGORY_LIST: {\r\n        type: 'GET',\r\n        path: '/common/get-categories',\r\n        keys: [],\r\n        values: []\r\n    },\r\n    GET_DASHBOARD_DATA: {\r\n        type: 'GET',\r\n        path: '/admin/get-admin-dashboard',\r\n        keys: [],\r\n        values: []\r\n    }\r\n};\r\n\r\n","\r\nexport const VALIDATION_PATTERNS = {\r\n  EMAIL: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\r\n  NAME: /^[a-zA-Z0-9!@#$%^&*'?><(){}:;.,_+=/\\~` -]+$/i,\r\n  PASSWORD: /^[a-zA-Z0-9!@#$%^&*]+$/i,\r\n  PHONE: /\\d{10}/,\r\n  USERNAME: /^[a-z0-9A-Z]+$/i,\r\n  POSITIVE_INTEGER: /^[0-9,\" \"]+$/i\r\n};\r\n","import { Injectable, Injector, OnInit } from '@angular/core';\r\nimport Utils from './utils';\r\nimport { GlobalVariables } from './globalVariables';\r\nimport { Router } from '@angular/router';\r\nimport { FormGroup, FormArray, FormControl } from '@angular/forms';\r\n\r\n@Injectable()\r\nexport class BaseClass implements OnInit {\r\n\r\n\r\n  constructor() {\r\n  }\r\n\r\n  // tslint:disable-next-line:contextual-lifecycle\r\n  ngOnInit() {\r\n    window.scrollTo(0, 0);\r\n  }\r\n\r\n  isValidInput(input) {\r\n    return Utils.isValidInput(input);\r\n  }\r\n\r\n  /**\r\n   * Validates any form fields present Group form\r\n   * @param groupName Group name should be a Group name passed from UI\r\n   * @param fieldName field name should be a form control name passed from UI\r\n   */\r\n  isValidField(groupName, fieldName) {\r\n    if (groupName.get(fieldName).invalid && (groupName.get(fieldName).touched || groupName.get(fieldName).dirty)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // to validate either formArray, formControl, FormGroup.\r\n  // tslint:disable-next-line:variable-name\r\n  getErrorMessage(formGroup, validation_messages, validation_item): string {\r\n    let message = '';\r\n    const keys = Object.keys(formGroup.controls);\r\n    const index = keys.indexOf(validation_item);\r\n    if (index !== -1) {\r\n      const control = formGroup.get(keys[index]);\r\n      if (control instanceof FormControl) {\r\n        message = this.getControlErrorMessage(control, validation_messages, validation_item);\r\n      }\r\n    } else {\r\n      // tslint:disable-next-line:prefer-for-of\r\n      for (let i = 0; i < keys.length; i++) {\r\n        const control = formGroup.get(keys[i]);\r\n        if (control instanceof FormGroup) {\r\n          this.getErrorMessage(control, validation_messages, validation_item);\r\n        } else if (control instanceof FormArray) {\r\n          message = this.validateFormArray(control, validation_messages, validation_item);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return message;\r\n  }\r\n  // to validate form array\r\n  // tslint:disable-next-line:variable-name\r\n  private validateFormArray(formControl: FormArray, validation_messages, validation_item) {\r\n    let message = '';\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < formControl.controls.length; i++) {\r\n      message = this.getErrorMessage(formControl.controls[i], validation_messages, validation_item);\r\n      if (message !== '') {\r\n        break;\r\n      }\r\n    }\r\n    return message;\r\n  }\r\n\r\n  // returns the error particular message configured in form.\r\n  // tslint:disable-next-line:variable-name\r\n  private getControlErrorMessage(control, validation_messages?: any, validation_item?: any) {\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let i = 0; i < validation_messages[validation_item].length; i++) {\r\n      if (control.hasError(validation_messages[validation_item][i].type)) {\r\n        return validation_messages[validation_item][i].message;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  findInvalidControls(formObject) {\r\n    const invalid = [];\r\n    const controls = formObject.controls;\r\n    for (const name in controls) {\r\n      if (controls[name].invalid || controls[name].hasError('notValid')) {\r\n        invalid.push(name);\r\n      }\r\n    }\r\n    Utils.log('Invalid Controls: ' + Utils.stringify(invalid));\r\n  }\r\n\r\n  /**\r\n   * Allow only number event\r\n   * @param event Keyboard event\r\n   */\r\n  onlyNumber(event) {\r\n    return event.keyCode >= 48 && event.keyCode <= 57;\r\n  }\r\n\r\n  /**\r\n   * Allow with decimals\r\n   * @param event Keyboard event\r\n   */\r\n  allowNumberAndDot(event) {\r\n    return (event.keyCode >= 48 && event.keyCode <= 57) || event.keyCode === 46;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport Utils from './utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GlobalVariables {\r\n\r\n  private paramsData: any = {};\r\n  private retainParamValue = false;\r\n\r\n  constructor() { }\r\n\r\n  // returns the data based on the key passed\r\n  // @key => object key from global variable enums\r\n  public getParameterData(key) {\r\n    if (!Utils.isUndefined(this.paramsData) && !Utils.isNull(this.paramsData)) {\r\n      if (this.paramsData.hasOwnProperty(key)) {\r\n        const output = this.paramsData[key];\r\n        if (this.retainParamValue === false) {\r\n          this.setParameterData(key, null);\r\n        }\r\n        return output;\r\n      } else {\r\n        return null;\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // single time set method\r\n  // @key => object key from global variable enums\r\n  // @input => any data value either an object or a value\r\n  // @retainvalue => weather the data should present or not\r\n  public setParameterData(key, input, retainValue = true) {\r\n    this.paramsData[key] = input;\r\n    this.retainParamValue = retainValue;\r\n    console.log(this.paramsData);\r\n  }\r\n}\r\n","// Angular Modules\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { map, catchError, retry } from 'rxjs/operators';\r\nimport { throwError } from 'rxjs';\r\nimport { PROPERTIES } from '../../constants/app-properties';\r\nimport { errors } from '../../constants/errors';\r\nimport { Observable } from 'rxjs';\r\n\r\n// Custom Enums\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CommonHttpService {\r\n\r\n    constructor(private _http: HttpClient) { }\r\n\r\n    // @method get\r\n    // @params HttpParams if needed\r\n    // @path Request URL\r\n    private get(path, requestOptions): Observable<any> {\r\n        return this._http.get(path, requestOptions).pipe(\r\n            map(res => {\r\n                return res;\r\n            }),\r\n            catchError(this.errorHandler), // Catch Errors if service fails\r\n            retry(PROPERTIES.RETRY_SERVICE_COUNT) // if you want to retry the request. Please mention the retry count value\r\n        );\r\n    }\r\n    // Utility method for Create.\r\n    // @method post\r\n    // @param path\r\n    // @param body\r\n    private put(path: string, body: Object = {}, requestOptions): Observable<any> {\r\n        return this._http.put(\r\n            path, body, requestOptions).pipe(\r\n                map(res => {\r\n                    return res;\r\n                }),\r\n                catchError(this.errorHandler)\r\n            );\r\n    }\r\n    // Utility method for Create.\r\n    // @method post\r\n    // @param path\r\n    // @param body\r\n    private post(path: string, body: Object = {}, requestOptions): Observable<any> {\r\n        return this._http.post(\r\n            path, body, requestOptions).pipe(\r\n                map(res => {\r\n                    return res;\r\n                }),\r\n                catchError(this.errorHandler)\r\n            );\r\n    }\r\n\r\n\r\n    // Utility method for Create.\r\n    // @method patch\r\n    // @param path\r\n    // @param body\r\n    // @param customHeaders\r\n    private patch(path: string, body: Object = {}, requestOptions): Observable<any> {\r\n        return this._http.patch(\r\n            path, body, requestOptions).pipe(\r\n                map(res => {\r\n                    return res;\r\n                }),\r\n                catchError(this.errorHandler)\r\n            );\r\n    }\r\n\r\n    // Utility method for Create.\r\n    // @method delete\r\n    // @param path\r\n    // @param customHeaders\r\n    private delete(path: string, requestOptions): Observable<any> {\r\n        return this._http.delete(\r\n            path, requestOptions).pipe(\r\n                map(res => {\r\n                    return res;\r\n                }),\r\n                catchError(this.errorHandler)\r\n            );\r\n    }\r\n\r\n    // Please add errors and error codes in errors.json.ts file\r\n    private errorHandler(error: HttpErrorResponse) {\r\n        // To know weather the error is from Client or server error\r\n        if (error.error instanceof ErrorEvent) {\r\n            console.log('Client side error. Please check the request and body');\r\n        } else {\r\n            console.log('Server Error. Please check the error from server side');\r\n        }\r\n        // get's error message from errors.json.ts\r\n        let errorMessage = errors['default'].message;\r\n        if (errors.hasOwnProperty(error.status)) {\r\n            errorMessage = errors[error.status].message;\r\n        }\r\n        return throwError(errorMessage);\r\n    }\r\n\r\n    // To execute any Http service request\r\n    public sendReciveService(\r\n        requestObj: any,\r\n        body = {},\r\n        params: HttpParams = new HttpParams(),\r\n        customHeaders?: HttpHeaders): Observable<any> {\r\n        const requestOptions = {};\r\n        requestOptions['headers'] = customHeaders ? customHeaders : {};\r\n        requestOptions['params'] = params;\r\n        switch (requestObj.type) {\r\n            case 'GET': {\r\n                return this.get(requestObj.path, requestOptions);\r\n            }\r\n            case 'POST': {\r\n                return this.post(requestObj.path, body, requestOptions);\r\n            }\r\n            case 'PUT': {\r\n                return this.put(requestObj.path, body, requestOptions);\r\n            }\r\n            case 'PATCH': {\r\n                return this.patch(requestObj.path, body, requestOptions);\r\n            }\r\n            case 'DELETE': {\r\n                return this.delete(requestObj.path, requestOptions);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CommonHttpService } from './common-http.service';\r\nimport { FrameURLService } from './frame-url.service';\r\nimport { Observable } from 'rxjs';\r\nimport Utils from '../common/utils';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CommonRequestService {\r\n\r\n  constructor(\r\n    private frameUrlService: FrameURLService,\r\n    private commonHttpService: CommonHttpService\r\n    ) { }\r\n\r\n  request(requestObject, postBody = null, httpParams = null, customHeaders = null): Observable<any> {\r\n    return this.mainRequest(Utils.avoidShallowClone(requestObject), postBody, httpParams, customHeaders);\r\n  }\r\n  private mainRequest(requestObject, postBody = null, httpParams = null, customHeaders = null): Observable<any> {\r\n    requestObject.path = this.frameUrlService.getHttpFramedURL(requestObject);\r\n    return this.commonHttpService.sendReciveService(requestObject, postBody, httpParams, customHeaders);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GlobalVariables } from '../common/globalVariables';\r\nimport { GlobalVariableEnums } from '../../constants/gloabal-variable-enums';\r\nimport { environment } from '../../../../environments/environment';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FrameURLService {\r\n    constructor(private _globalVariables: GlobalVariables) { }\r\n\r\n    // Return the Exact path to be sent\r\n    public getHttpFramedURL(requestObj: any) {\r\n        const URL = environment.BASE_URL + requestObj.path;\r\n        let path = URL.replace('token', this._globalVariables.getParameterData(GlobalVariableEnums.TOKEN));\r\n        if (requestObj.keys.length > 0 && requestObj.values.length > 0) {\r\n            for (let i = 0; i < requestObj.keys.length; i++) {\r\n                // Replaces the word which starts with colon only. which indicates run time value\r\n                path = path.replace(':' + requestObj.keys[i], requestObj.values[i]);\r\n            }\r\n        }\r\n        return path;\r\n    }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"default~profile-profile-module~views-auth-views-login-login-module~views-auth-views-registration-reg~fbe267c6-es5.js"}